			Принцип работы программы
	
		1. В конфигурационном файле config.json задаются пути документов (файлов), в которых будет осуществляться поиск.
		2. Программа читает документы, сохраняет их как базу.
		3. Затем, на основе базы документов, программа создаёт базу относительного индекса, чтобы по поисковому запросу найти наиболее релевантные документы.
		4. Запросы содержатся в файле requests.json. Запрос - это набор слов, по которым ищутся документы.
		5. Программа читает запросы и сохраняет их как базу.
		6. Программа ищет документы по базе относительного индекса, в которых встречаются слова запросов.
		7. На основе этого поиска создаётся база релевантности ответов (соответствие запроса и документа по рангу).
		7. Результаты поиска ранжируются, сортируются и выводятся в файл answers.json. Максимальное количество 
		документов в ответе задаётся в конфигурационном файле.
		
		
		
			Класс ReadWriteJSONFile
		
		Класс реализует чтение и запись JSON-файлов
		
			Выполняет следующие функции:
		
		1. Читает JSON-файл
		2. Записывает JSON-файл
				
		Конструкторы:
			
			По умолчанию: да
			Является: копируемым (неявно) и перемещаемым (неявно)
		
			Общедоступные функции:
			Прочитать JSON-файл
			JSON readJSONFile(const std::string& filePath);
			Записать JSON-файл
			void writeJSONFile(const JSON& objectJSON, const std::string& filePath, int formatByWidth = 2);
			
			
				
			Класс ReadTextFile
		
		Класс реализует чтение текстовых файлов
		
			Выполняет следующие функции:
		
		1. Читает текстовый файл
				
		Конструкторы:
			
			По умолчанию: да
			Является: копируемым (неявно) и перемещаемым (неявно)
		
			Общедоступные функции:
			Прочитать документы в отдельных потоках
			std::vector<std::string> readTextFile(const std::vector<std::string>& filePaths);
			
			
			
			Класс ConverterJSON
		
		Класс реализует работу с JSON-объектами.
		
			Выполняет следующие функции:
		
		1. Получает список файлов документов.
		2. Получает запросы.
		3. Получает значение максимального количества ответов.
		4. Записывает в JSON-объект результаты поиска.
		5. Получает JSON-объект ответов.
		6. Хранит JSON-объекты конфигурации, запросов, ответов
		7. Предоставляет ссылку на JSON-объект ответов
		
				Конструкторы:
			
			По умолчанию: нет
			Принимает 2 JSON-объектами
			ConverterJSON(const JSON& in_configJSON, const JSON& in_requestsJSON)
			ConverterJSON(JSON&& in_configJSON, JSON&& in_requestsJSON)
			Является: копируемым (неявно) и перемещаемым (неявно)
		
			Общедоступные функции:
			
			Получить список файлов документов
			std::vector<std::string> getFilePaths();
			Получить запросы
			std::vector<std::string> getRequests();
			Получить значение максимального количества ответов
			int getMaxResponses();
			Записать в JSON-объект результаты поиска
			void setAnswersJSON(const std::vector<std::vector<std::pair<int, float>>>& answers, int maxResponses);
			Получить JSON-объект ответов
			JSON& getAnswersJSON();
			
			
		
			Класс Documents
		
		Класс реализует загрузку и хранение базы документов.
		
			Выполняет следующие функции:
		
		1. Обновляет базу документов.
		2. Хранит базу документов.
		3. Предоставляет ссылку на базу документов.
		4. Очищает базу документов.
		
				Конструкторы:
			
			По умолчанию: да
			Является: копируемым (неявно) и перемещаемым (неявно)
			
			Копирование - затратная операция
			
			Общедоступные функции:
			
			Обновить базу документов
			void updateDocuments(const std::vector<std::string>& in_documents);
			void updateDocuments(std::vector<std::string>&& in_documents);
			Получить ссылку на базу документов
			const std::vector<std::string>& getDocuments();
			Очистить базу документов
			clearDocuments();
			
			
		
			Класс Requests
		
		Класс реализует загрузку и хранение базы запросов.
		
			Выполняет следующие функции:
		
		1. Обновляет базу запросов.
		2. Хранит базу запросов.
		3. Предоставляет ссылку на базу запросов.
		4. Очищает базу запросов.
		
		Конструкторы:
			
			По умолчанию: да
			Является: копируемым (неявно) и перемещаемым (неявно)
			
			Копирование - затратная операция
			
			Общедоступные функции:
			
			Обновить базу запросов
			void updateRequests(const std::vector<std::string>& in_requests);
			void updateRequests(std::vector<std::string>&& in_requests);
			Получить ссылку на базу запросов
			const std::vector<std::string>& getRequests();
			Очистить базу запросов
			void clearRequests();
		
		
		
			Класс InvertedIndex
		
		Класс реализует инвертированную индексацию документов.
		
		1. Очищает базу инвертированных индексов
		2. Запускает инвертированную индексацию документов в отдельных потоках.
		3. Хранит базу инвертированных индексов.
		4. Предоставляет ссылку на базу инвертированных индексов.
		
		Конструкторы:
			
			По умолчанию: нет
			Инициализирует ссылку на базу документов
			explicit InvertedIndex(const std::vector<std::string>& in_documents) : documents{in_documents} {}
			Не является: копируемым и перемещаемым (содержит мьютекс)
						
			Общедоступные функции:
			1. Обновить базу инвертированных индексов
			void updateInvertedIndexes();
			2. Получить ссылку на базу инвертированных индексов
			const std::map<std::string, std::vector<Entry>>& getInvertedIndexes();
			
			
			
			Класс RelevantResponse
		
		Класс определяет релевантность ответов.
		
			Выполняет следующие функции:
		
		1. Очищает базу релевантности ответов.
		2. Обновляет подготовленную базу запросов.
		3. Рассчитывает частоту вхождения слова в документах по запросам и максимальную релевантность.
		4. Определяет относительную релевантность.
		5. Сортирует документы по убыванию релевантности.
		6. Хранит базу релевантных ответов.
		7. Предоставляет ссылку на базу релевантных ответов.
		
			Конструкторы:
			
			По умолчанию: нет
			
			Инициализирует: ссылку на базу инвертированных индексов, cсылку на базу запросов
			Оператор присваивания неявно удалён (содержит ссылки на базы)
			RelevantResponse(const std::map<std::string, std::vector<Entry>>& in_invertedIndexes,
                     const std::vector<std::string>& in_requests)
						
			Оператор присваивания неявно удалён (содержит ссылки на базы)
			
			Копирование - затратная операция
			
			Общедоступные функции:
			
			1. Рассчитать релевантность ответов:
			void updateRelevantResponses();
			2. Получить ссылку на базу релевантности ответов:
			const std::vector<std::vector<RelativeIndex>>& getRelevantResponses();
			
			
			
			Класс PreparedRequest (вложенный класс RelevantResponse)
		
		Класс подготавливает базу запросов и хранит её.
		
			Выполняет следующие функции:
		
		1. Очищает подготовленную базу запросов.
		2. Разбивает базу запросов на отдельные слова и заполняет ими подготовленную базу запросов.
		3. Преобразует подготовленные запросы, в запросы, содержащие уникальные слова.
		4. Сортирует слова по частоте вхождения в документы.
		5. Хранит подготовленную базу запросов.
		6. Предоставляет ссылку на подготовленную базу запросов.
		
				
		Конструкторы:
			
			По умолчанию: нет
			Инициализирует: ссылку на базу инвертированных индексов, ссылку на базу запросов
			PreparedRequest(const std::map<std::string, std::vector<Entry>>& in_invertedIndexes,
                        const std::vector<std::string>& in_requests)
			Оператор присваивания неявно удалён (содержит ссылки на базы)
			
			Копирование - затратная операция
			
			Общедоступные функции:
			
			Обновить подготовленную базу запросов:
			void updatePreparedRequests();
			Получить ссылку на подготовленную базу запросов:
			const std::vector<std::vector<std::string>>& getPreparedRequests();
			
			
		
		Класс SearchEngine
		
		Класс организует взаимодействие между другими классами.
		
			Выполняет следующие функции:
		
		1. Создаёт и хранит объекты классов ConverterJSON, Documents, InvertedIndex, Requests, RelevantResponse.
		2. Рассчитывает релевантность ответов.
		3. Рассчитывает релевантность ответов, при изменении документов.
		4. Рассчитывает релевантность ответов, при изменении запросов.
		5. Преобразует базу релевантности ответов в другой тип.
		
		Конструкторы:
			
			По умолчанию: да
			Инициализирует объекты классов
			Не является: копируемым и перемещаемым (содержит объект InvertedIndex (содержит мьютекс))
			
			Общедоступные функции:
			
			Рассчитать релевантность ответов:
			void searchModifiedAll();
			Рассчитать релевантность ответов, при изменении документов:
			void searchModifiedDocuments();
			Рассчитать релевантность ответов, при изменении запросов
			void searchModifiedRequests();
			Преобразовать базу релевантности ответов в другой тип:
			std::vector<std::vector<std::pair<int, float>>> exportRelevantResponses();
